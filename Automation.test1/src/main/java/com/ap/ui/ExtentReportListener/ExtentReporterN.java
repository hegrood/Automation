package com.ap.ui.ExtentReportListener;

import java.io.File;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.testng.IReporter;
import org.testng.IResultMap;
import org.testng.ISuite;
import org.testng.ISuiteResult;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.xml.XmlSuite;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

public class ExtentReporterN implements IReporter
{	
	private ExtentReports extent;
	
	// 
	public void generateReport(List<XmlSuite> xmlSuites, List<ISuite> suites, String outputDirectory) 
	{
		/* creates a new class of Extent reports and tells it the location of where the report will be output to
		 calls an object of Extent Report, captures the values captured from
		 save all outputs as a string*/
		// boolean: checks to see if you receive result. if there is no result from the test script, do not generate a report
		extent = new ExtentReports(outputDirectory + File.separator + "Extent.html", true);
		
		//suites: 
		//map: obtains a unique key value that cannot be a duplicate, then maps it to one location. Is an interface in java.
		// : (conditional operator) if x, run this code, if else, run something else. Also "FOR EACH" i:e: for each "suite" in "suites"
		for(ISuite suite : suites) //for loop to iterate the child suites
		{
			Map<String, ISuiteResult>result=suite.getResults();
			
			// for each result from the ISuiteResult(results), assign a value of pass, fail or skip
		for(ISuiteResult r : result.values())
			{
				ITestContext context = r.getTestContext();
				
				buildTestNodes(context.getPassedTests(), LogStatus.PASS);
				buildTestNodes(context.getFailedTests(), LogStatus.FAIL);
				buildTestNodes(context.getSkippedTests(), LogStatus.SKIP);
			}
	}
	
	extent.flush(); // adding the result to the html file generated by extent
	extent.close(); //close the file
}
	
	private void buildTestNodes (IResultMap tests, LogStatus status)
	{
		ExtentTest test;
		
		if(tests.size()>0)
		{
			//for each test in the result, execute the following code
			for(ITestResult result : tests.getAllResults())
			{
				test = extent.startTest(result.getMethod().getMethodName());
				// tells you how long the test took to execute
				test.setStartedTime(getTime(result.getStartMillis()));
				test.setEndedTime(getTime(result.getEndMillis()));
				// groups each result into categories
				for(String group:result.getMethod().getGroups())
				{
					test.assignCategory(group);
				
				//if there is an error in the result, get the error and log it. If there is none, just log the status.
				//null = empty string
				if(result.getThrowable() !=null)
					test.log(status, result.getThrowable());
				else
					test.log(status, "Test "+status.toString().toLowerCase()+"ed");
				}	
			//ends the test
			extent.endTest(test);
			}
		}
	}
	
	//creates a constructor to retrieve the local machine time and return it when getTime is invoked
	private Date getTime(long millis)
	{
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeInMillis(millis);
		return calendar.getTime();
	}
}